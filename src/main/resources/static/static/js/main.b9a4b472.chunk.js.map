{"version":3,"sources":["components/Header.js","components/Movie/MovieItem.js","components/Movie/MovieList.js","actions/movieActions.js","actions/types.js","reducers/movieReducer.js","reducers/index.js","store.js","App.js","serviceWorker.js","index.js"],"names":["Header","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","yearSelected","bind","assertThisInitialized","year","event","props","yearSelection","preventDefault","_this2","react_default","a","createElement","className","map","ryear","key","react_router_dom","to","concat","onClick","Component","MovieItem","movie","src","poster_url","alt","movieName","genre","imdb_rating","rotten_tomatoes_rating","MovieList","state","selectedYear","getMovies","movies","Movie_MovieItem","imdbId","connect","ev","_ref","asyncToGenerator","regenerator_default","mark","_callee","dispatch","res","wrap","_context","prev","next","axios","get","sent","type","payload","data","stop","_x","apply","arguments","initialState","combineReducers","length","undefined","action","objectSpread","initalState","middleware","thunk","store","window","navigator","userAgent","includes","createStore","rootReducer","compose","applyMiddleware","__REDUX_DEVTOOLS_EXTENSION__","App","handleSelection","setState","es","components_Header","Movie_MovieList","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b9a4b472.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nimport { Link } from \"react-router-dom\";\r\n\r\nclass Header extends Component {\r\n  constructor() {\r\n    super();\r\n    this.yearSelected = this.yearSelected.bind(this);\r\n  }\r\n\r\n  yearSelected(year, event) {\r\n    this.props.yearSelection(year);\r\n    event.preventDefault();\r\n    // console.log(\"component header\", year);\r\n  }\r\n\r\n  render() {\r\n    const releaseYears = [2018, 2017, 2016];\r\n    return (\r\n      <div className=\"container\">\r\n        <nav className=\"navbar navbar-expand-lg navbar-dark bg-dark\">\r\n          <label className=\"navbar-brand\">Top Movies</label>\r\n\r\n          <div className=\"collapse navbar-collapse\">\r\n            <ul className=\"navbar-nav\">\r\n              {releaseYears.map(ryear => (\r\n                <li className=\"nav-item active\" key={ryear}>\r\n                  <Link\r\n                    to={`/movies/${ryear}`}\r\n                    className=\"btn btn-link\"\r\n                    onClick={this.yearSelected.bind(this, ryear)}\r\n                  >\r\n                    {ryear}\r\n                  </Link>\r\n                </li>\r\n              ))}\r\n            </ul>\r\n          </div>\r\n        </nav>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Header;\r\n","import React, { Component } from \"react\";\r\n\r\nclass MovieItem extends Component {\r\n  render() {\r\n    const { movie } = this.props;\r\n    return (\r\n      <div>\r\n        <ul className=\"list-unstyled\">\r\n          <li className=\"list-group-item\">\r\n            <div className=\"d-flex media row\">\r\n              <img\r\n                className=\"mr-3 col-1 d-none d-lg-block d-xl-block\"\r\n                src={movie.poster_url}\r\n                alt={\"\"}\r\n              />\r\n\r\n              <div className=\"media-body m-2\">\r\n                <b> {movie.movieName}</b>\r\n                <div>Genre:{movie.genre}</div>\r\n                <div>IMDB:{movie.imdb_rating}</div>\r\n                <div>Rotten Tomatoes:{movie.rotten_tomatoes_rating}</div>\r\n              </div>\r\n            </div>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MovieItem;\r\n","import React, { Component } from \"react\";\r\nimport MovieItem from \"./MovieItem\";\r\nimport { connect } from \"react-redux\";\r\nimport { getMovies } from \"../../actions/movieActions\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nclass MovieList extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      year: this.props.selectedYear\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.props.getMovies(this, this.props.selectedYear);\r\n    //console.log(\"entered MovieList\", this.props.selectedYear);\r\n  }\r\n\r\n  static getDerivedStateFromProps(props, state) {\r\n    if (props.selectedYear !== state.year) {\r\n      props.getMovies(this, props.selectedYear);\r\n      return {\r\n        year: props.selectedYear\r\n      };\r\n    }\r\n    // Return null if the state hasn't changed\r\n    return null;\r\n  }\r\n\r\n  render() {\r\n    const { movies } = this.props.movie;\r\n\r\n    return (\r\n      <div className=\"container\">\r\n        {movies.map(movie => (\r\n          <MovieItem key={movie.imdbId} movie={movie} />\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nMovieList.propTypes = {\r\n  movie: PropTypes.object.isRequired,\r\n  getMovies: PropTypes.func.isRequired\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  movie: state.movie\r\n});\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  { getMovies }\r\n)(MovieList);\r\n","import axios from \"axios\";\r\nimport { GET_MOVIES } from \"./types\";\r\n\r\nexport const getMovies = (ev, year) => async dispatch => {\r\n  const res = await axios.get(\"/api/topmovies/\" + year);\r\n  dispatch({\r\n    type: GET_MOVIES,\r\n    payload: res.data\r\n  });\r\n};\r\n","export const GET_ERRORS = \"GET_ERRORS\";\r\nexport const GET_MOVIES = \"GET_MOVIES\";\r\n","import { GET_MOVIES } from \"../actions/types\";\r\n\r\nconst initialState = {\r\n  movies: [],\r\n  movie: {}\r\n};\r\n\r\nexport default function(state = initialState, action) {\r\n  switch (action.type) {\r\n    case GET_MOVIES:\r\n      return {\r\n        ...state,\r\n        movies: action.payload\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { combineReducers } from \"redux\";\r\nimport movieReducer from \"./movieReducer\";\r\n\r\nexport default combineReducers({\r\n  movie: movieReducer\r\n});\r\n","import { createStore, applyMiddleware, compose } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport rootReducer from \"./reducers\";\r\n\r\nconst initalState = {};\r\nconst middleware = [thunk];\r\n\r\nlet store;\r\n\r\nif (window.navigator.userAgent.includes(\"Chrome\")) {\r\n  store = createStore(\r\n    rootReducer,\r\n    initalState,\r\n    compose(\r\n      applyMiddleware(...middleware),\r\n      window.__REDUX_DEVTOOLS_EXTENSION__ &&\r\n        window.__REDUX_DEVTOOLS_EXTENSION__()\r\n    )\r\n  );\r\n} else {\r\n  store = createStore(\r\n    rootReducer,\r\n    initalState,\r\n    compose(applyMiddleware(...middleware))\r\n  );\r\n}\r\n\r\nexport default store;\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Header from \"./components/Header\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport MovieList from \"./components/Movie/MovieList\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport { Provider } from \"react-redux\";\nimport store from \"./store\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      selectedYear: 2018\n    };\n\n    this.handleSelection = this.handleSelection.bind(this);\n  }\n\n  handleSelection(year) {\n    this.setState({ selectedYear: year });\n    // console.log(\"Component APP\", year);\n  }\n\n  render() {\n    return (\n      <Provider store={store}>\n        <Router>\n          <div className=\"container\">\n            <Header yearSelection={this.handleSelection} />\n            <MovieList selectedYear={this.state.selectedYear} />\n          </div>\n        </Router>\n      </Provider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}